name: Deployment Status Monitor

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
  push:
    branches: [main]  # Only run on main branch

jobs:
  monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if monitoring is enabled
        id: check_enabled
        run: |
          # Check if MONITOR_ENABLED secret is set to 'true'
          if [[ "${{ secrets.MONITOR_ENABLED }}" == "true" ]]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Monitoring is enabled"
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Monitoring is disabled (set MONITOR_ENABLED=true to enable)"
          fi

      - name: Check OCR health
        if: steps.check_enabled.outputs.enabled == 'true'
        continue-on-error: true
        run: |
          if curl -fsS https://ocr.insightpulseai.net/health | jq .; then
            echo "‚úÖ OCR service is healthy"
          else
            echo "‚ö†Ô∏è OCR service health check failed"
          fi

      - name: Check Vercel Deployment
        if: steps.check_enabled.outputs.enabled == 'true' && vars.VERCEL_PROJECT_ID != ''
        continue-on-error: true
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v6/deployments?projectId=${{ vars.VERCEL_PROJECT_ID }}&limit=1")

          STATE=$(echo "$RESPONSE" | jq -r '.deployments[0].state')
          URL=$(echo "$RESPONSE" | jq -r '.deployments[0].url')

          echo "### Vercel Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **State**: $STATE" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://$URL" >> $GITHUB_STEP_SUMMARY

          if [ "$STATE" != "READY" ]; then
            echo "‚ö†Ô∏è Vercel deployment not ready: $STATE"
          fi

      - name: Check GitHub Actions Status
        if: steps.check_enabled.outputs.enabled == 'true'
        continue-on-error: true
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=1&branch=main")

          STATUS=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].status')
          CONCLUSION=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].conclusion')

          echo "### GitHub Actions Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Conclusion**: $CONCLUSION" >> $GITHUB_STEP_SUMMARY

          if [ "$CONCLUSION" == "failure" ]; then
            echo "‚ùå Latest workflow failed (monitoring only, not blocking)"
          fi

      - name: Check Supabase Health
        if: steps.check_enabled.outputs.enabled == 'true' && vars.SUPABASE_PROJECT_REF != ''
        continue-on-error: true
        run: |
          # Ping Supabase project URL
          HEALTH_URL="https://${{ vars.SUPABASE_PROJECT_REF }}.supabase.co/rest/v1/"

          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
            "$HEALTH_URL")

          echo "### Supabase Status" >> $GITHUB_STEP_SUMMARY
          echo "- **HTTP Status**: $STATUS_CODE" >> $GITHUB_STEP_SUMMARY

          if [ "$STATUS_CODE" != "200" ]; then
            echo "‚ö†Ô∏è Supabase health check failed: HTTP $STATUS_CODE"
          fi

      - name: Check DigitalOcean App
        if: steps.check_enabled.outputs.enabled == 'true' && vars.DO_APP_ID != ''
        continue-on-error: true
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.DO_ACCESS_TOKEN }}" \
            "https://api.digitalocean.com/v2/apps/${{ vars.DO_APP_ID }}")

          PHASE=$(echo "$RESPONSE" | jq -r '.app.active_deployment.phase')
          LIVE_URL=$(echo "$RESPONSE" | jq -r '.app.live_url')

          echo "### DigitalOcean App Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Phase**: $PHASE" >> $GITHUB_STEP_SUMMARY
          echo "- **Live URL**: $LIVE_URL" >> $GITHUB_STEP_SUMMARY

          if [ "$PHASE" != "ACTIVE" ]; then
            echo "‚ö†Ô∏è DigitalOcean app not active: $PHASE"
          fi

      - name: Odoo health check (optional)
        if: steps.check_enabled.outputs.enabled == 'true'
        continue-on-error: true
        run: |
          if [[ -n "${{ secrets.ODOO_FQDN }}" ]]; then
            curl -fsS https://${{ secrets.ODOO_FQDN }}/web/login && echo "‚úÖ Odoo is accessible"
          else
            echo "‚è≠Ô∏è ODOO_FQDN not set, skipping Odoo health check"
          fi

      - name: Send notification on failure
        if: failure()
        run: |
          echo "üö® Deployment health check failed!"
          echo "Check the workflow summary for details"
