name: DB - Staging Migration

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no changes applied)'
        required: false
        default: 'false'

jobs:
  migrate-staging:
    runs-on: ubuntu-latest
    environment: staging
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --only=production

      - name: Validate migration files
        run: |
          echo "üîç Validating migration files..."
          if [ ! -d "scripts" ]; then
            echo "‚ùå scripts directory not found"
            exit 1
          fi

          migration_count=$(ls scripts/*.sql 2>/dev/null | wc -l)
          echo "‚úì Found $migration_count migration files"

          if [ $migration_count -eq 0 ]; then
            echo "‚ö†Ô∏è  No migration files found - nothing to do"
            exit 0
          fi

      - name: Run migrations (dry-run first)
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NODE_ENV: staging
        run: |
          echo "üß™ Running dry-run first..."
          node scripts/run-migrations.js --dry-run --verbose

      - name: Run migrations (actual)
        if: ${{ github.event.inputs.dry_run != 'true' }}
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NODE_ENV: staging
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          echo "üöÄ Running migrations on STAGING..."
          node scripts/run-migrations.js --verbose

      - name: Verify migration status
        if: success()
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "‚úÖ Checking migration status..."
          node -e "
          const { Client } = require('pg');
          (async () => {
            const client = new Client({ connectionString: process.env.DATABASE_URL });
            await client.connect();
            const result = await client.query('SELECT * FROM get_migration_status()');
            console.log('Migration Status:', JSON.stringify(result.rows[0], null, 2));
            await client.end();
          })().catch(console.error);
          "

      - name: Rollback on failure
        if: failure()
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "‚ùå Migration failed - checking rollback options..."
          echo "‚ö†Ô∏è  Automatic rollback not implemented"
          echo "‚ÑπÔ∏è  Please restore from latest backup or manually revert"
          echo "‚ÑπÔ∏è  Check migration_history table for details"

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Staging migration failed. Check logs and migration_history table."

      - name: Comment PR with migration results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## üóÑÔ∏è Database Migration Results (Staging)

            **Status**: ${{ job.status }}
            **Trigger**: ${{ github.event_name }}
            **Actor**: @${{ github.actor }}

            Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
