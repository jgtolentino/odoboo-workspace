name: DB - Production Migration

on:
  push:
    tags: ['v*.*.*']
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "MIGRATE-PRODUCTION" to confirm'
        required: true
      dry_run:
        description: 'Run in dry-run mode (no changes applied)'
        required: false
        default: 'true'

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Tag: $VERSION"

      - name: Validate semantic version
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version tag: $VERSION"
            echo "   Must be semantic version (e.g., v1.0.0)"
            exit 1
          fi
          echo "✓ Valid version tag"

  migrate-prod:
    runs-on: ubuntu-latest
    needs: [validate-tag]
    if: always() && !cancelled()
    environment:
      name: production
      url: https://your-app.com
    timeout-minutes: 15

    steps:
      - name: Validate manual confirmation
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "MIGRATE-PRODUCTION" ]; then
            echo "❌ Confirmation required!"
            echo "   Please type 'MIGRATE-PRODUCTION' exactly"
            exit 1
          fi
          echo "✓ Manual confirmation received"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --only=production

      - name: Validate migration files
        run: |
          echo "🔍 Validating migration files..."
          if [ ! -d "scripts" ]; then
            echo "❌ scripts directory not found"
            exit 1
          fi

          migration_count=$(ls scripts/*.sql 2>/dev/null | wc -l)
          echo "✓ Found $migration_count migration files"

          if [ $migration_count -eq 0 ]; then
            echo "⚠️  No migration files found - nothing to do"
            exit 0
          fi

      - name: Check production database health
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          echo "🏥 Checking database health..."
          node -e "
          const { Client } = require('pg');
          (async () => {
            const client = new Client({ connectionString: process.env.DATABASE_URL });
            try {
              await client.connect();
              const result = await client.query('SELECT version()');
              console.log('✓ Database connection OK');
              console.log('  PostgreSQL version:', result.rows[0].version);

              // Check current migration status
              const status = await client.query('SELECT * FROM get_migration_status()');
              if (status.rows.length > 0) {
                console.log('Current migration status:', status.rows[0]);
              }
              await client.end();
            } catch (error) {
              console.error('❌ Database health check failed:', error.message);
              process.exit(1);
            }
          })();
          "

      - name: Create pre-migration backup marker
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          echo "📝 Creating backup marker..."
          TIMESTAMP=$(date -u +"%Y%m%d_%H%M%S")
          echo "BACKUP_MARKER=pre_migration_${TIMESTAMP}_${{ needs.validate-tag.outputs.version }}" >> $GITHUB_ENV
          echo "✓ Backup marker: ${BACKUP_MARKER}"
          echo ""
          echo "⚠️  IMPORTANT: Ensure database backup exists before proceeding!"
          echo "   Recommended: Use Supabase automatic backups or pg_dump"

      - name: Run migrations (dry-run first - MANDATORY)
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          NODE_ENV: production
        run: |
          echo "🧪 Running MANDATORY dry-run on PRODUCTION..."
          echo "⚠️  This is a safety check - no changes will be applied"
          node scripts/run-migrations.js --dry-run --verbose

      - name: Wait for approval
        if: github.event_name == 'push'
        run: |
          echo "⏸️  Dry-run complete"
          echo "ℹ️  Review the output above carefully"
          echo "ℹ️  Workflow will continue automatically in 30 seconds"
          echo "ℹ️  Cancel now if you see any issues!"
          sleep 30

      - name: Run migrations (PRODUCTION)
        if: ${{ github.event.inputs.dry_run != 'true' }}
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          NODE_ENV: production
          GITHUB_ACTOR: ${{ github.actor }}
          CONFIRM_PRODUCTION_MIGRATION: "true"
        run: |
          echo "🚀 Running migrations on PRODUCTION..."
          echo "⚠️  This will modify the production database!"
          echo "   Actor: ${{ github.actor }}"
          echo "   Version: ${{ needs.validate-tag.outputs.version }}"
          echo ""
          node scripts/run-migrations.js --verbose

      - name: Verify production migration status
        if: success()
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          echo "✅ Verifying migration status..."
          node -e "
          const { Client } = require('pg');
          (async () => {
            const client = new Client({ connectionString: process.env.DATABASE_URL });
            await client.connect();

            // Get migration status
            const status = await client.query('SELECT * FROM get_migration_status()');
            console.log('📊 Migration Status:');
            console.log(JSON.stringify(status.rows[0], null, 2));

            // Get recent history
            const history = await client.query(
              'SELECT * FROM migration_history ORDER BY executed_at DESC LIMIT 5'
            );
            console.log('\n📜 Recent Migration History:');
            console.table(history.rows);

            await client.end();
          })().catch(error => {
            console.error('❌ Verification failed:', error.message);
            process.exit(1);
          });
          "

      - name: Run smoke tests
        if: success() && github.event.inputs.dry_run != 'true'
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          echo "🧪 Running post-migration smoke tests..."
          node -e "
          const { Client } = require('pg');
          (async () => {
            const client = new Client({ connectionString: process.env.DATABASE_URL });
            await client.connect();

            // Test 1: Check critical tables exist
            const tables = await client.query(
              \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name\"
            );
            console.log(\`✓ Found \${tables.rows.length} tables\`);

            // Test 2: Check migration tracking
            const migrations = await client.query('SELECT COUNT(*) as count FROM schema_migrations');
            console.log(\`✓ Migration tracking: \${migrations.rows[0].count} migrations recorded\`);

            // Test 3: Check for failed migrations
            const failed = await client.query(
              \"SELECT COUNT(*) as count FROM schema_migrations WHERE status = 'failed'\"
            );
            if (failed.rows[0].count > 0) {
              throw new Error(\`❌ Found \${failed.rows[0].count} failed migrations!\`);
            }
            console.log('✓ No failed migrations');

            await client.end();
            console.log('\n✅ All smoke tests passed');
          })().catch(error => {
            console.error('❌ Smoke tests failed:', error.message);
            process.exit(1);
          });
          "

      - name: Rollback on failure
        if: failure() && github.event.inputs.dry_run != 'true'
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          echo "❌ PRODUCTION MIGRATION FAILED!"
          echo ""
          echo "⚠️  IMMEDIATE ACTIONS REQUIRED:"
          echo "   1. Check migration_history table for error details"
          echo "   2. Restore from backup: ${{ env.BACKUP_MARKER }}"
          echo "   3. Investigate failure in migration logs above"
          echo "   4. DO NOT retry until issue is resolved"
          echo ""
          echo "🔍 Failure diagnostics:"
          node -e "
          const { Client } = require('pg');
          (async () => {
            try {
              const client = new Client({ connectionString: process.env.DATABASE_URL });
              await client.connect();
              const failed = await client.query(
                \"SELECT * FROM migration_history WHERE status = 'failed' ORDER BY executed_at DESC LIMIT 1\"
              );
              if (failed.rows.length > 0) {
                console.log('Last failed migration:');
                console.log(JSON.stringify(failed.rows[0], null, 2));
              }
              await client.end();
            } catch (error) {
              console.error('Could not retrieve failure details:', error.message);
            }
          })();
          "

      - name: Create GitHub Release
        if: success() && startsWith(github.ref, 'refs/tags/v') && github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ needs.validate-tag.outputs.version }}';
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: `## 🗄️ Database Migration\n\n✅ Production migrations completed successfully.\n\nCheck the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`,
              draft: false,
              prerelease: false,
            });

      - name: Notify on success
        if: success() && github.event.inputs.dry_run != 'true'
        run: |
          echo "::notice::✅ Production migration completed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::❌ Production migration FAILED! Check logs immediately and restore from backup if needed."
