version: '3.8'

# Production deployment using pre-built registry images
# Usage: docker compose -f docker-compose.production.yml up -d

services:
  # Odoo 18 - Main ERP
  odoo:
    image: ghcr.io/jgtolentino/odoboo-odoo:latest
    container_name: odoo18
    depends_on:
      - db
      - redis
    ports:
      - '8069:8069'
      - '8072:8072'
    volumes:
      - odoo-data:/var/lib/odoo
      - ./config:/etc/odoo
      - ./addons:/mnt/extra-addons
      - ./oca:/mnt/oca
    environment:
      - HOST=db
      - USER=odoo
      - PASSWORD=odoo
      - PORT=5432
    networks:
      - odoo-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8069/web/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: odoo-db
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=odoo
      - POSTGRES_PASSWORD=odoo
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - odoo-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U odoo']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for queue_job and caching)
  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - odoo-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # OCR Service - Receipt extraction
  ocr-service:
    image: ghcr.io/jgtolentino/odoboo-ocr:latest
    container_name: ocr-service
    restart: unless-stopped
    ports:
      - '8000:8000'
    environment:
      - OCR_SPACE_API_KEY=${OCR_SPACE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OCR_IMPL=paddleocr-vl
      - MIN_CONFIDENCE=0.60
    volumes:
      - ocr-uploads:/app/uploads
    networks:
      - odoo-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Agent Service - AI automation
  agent-service:
    image: ghcr.io/jgtolentino/odoboo-agent:latest
    container_name: agent-service
    restart: unless-stopped
    ports:
      - '8001:8001'
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    volumes:
      - agent-temp:/tmp
    networks:
      - odoo-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8001/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: fin-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-certbot:/etc/letsencrypt
    networks:
      - odoo-network
    depends_on:
      - odoo
      - ocr-service
      - agent-service
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  odoo-data:
    driver: local
  db-data:
    driver: local
  ocr-uploads:
    driver: local
  agent-temp:
    driver: local
  nginx-certbot:
    driver: local

networks:
  odoo-network:
    driver: bridge
